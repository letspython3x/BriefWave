#!/usr/bin/env python3
"""A single-file script that orchestrates the automation process to generate and email content summaries."""

import sys
from datetime import datetime
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from openai import OpenAI


class EmailConfig:
    """Email configuration settings."""

    SENDER_EMAIL = ''
    SENDER_PASSWORD = ''
    RECEIVER_EMAIL = ''
    SMTP_SERVER = 'smtp.gmail.com'
    SMTP_PORT = 587
    EMAIL_SUBJECT = "Report Summary"
    EMAIL_DISCLAIMER = "This is an automated summary generated by an AI. Please verify information from original sources."


class OpenAIConfig:
    """OpenAI API configuration settings."""

    API_KEY = ""
    MODEL = "gpt-3.5-turbo"
    PROMPT = [
        {
            "title": "Income Tax Circulars",
            "content": ("Summarize the latest IT circulars from the Income Tax Department of India in past one week. "
                        "Focus on key changes, deadlines, and implications for taxpayers. "
                        "Format the information in a clear, concise manner suitable for an email newsletter.")
        },
        {
            "title": "",
            "content": "",
        },
        {
            "title": "",
            "content": "",
        },
        {
            "title": "",
            "content": "",
        }
    ]


class ChatGPTClient:
    """Responsible for interacting with the OpenAI ChatGPT API to generate summaries."""

    def __init__(self, api_key: str, model: str):
        """Initialize the ChatGPT client with API key and model."""

        self.client = OpenAI(api_key=api_key)
        self.model = model

    def generate_summary(self, prompt: str) -> str:
        """Uses the ChatGPT API to generate a summary based on the given prompt."""

        if not prompt:
            raise ValueError("No prompt provided for summarization.")

        print("Sending request to ChatGPT for summary generation...")
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "You are a helpful assistant that generates concise summaries."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )

            summary = response.choices[0].message.content
            print("ChatGPT summary generation successful.")
            return summary
        except Exception as e:
            print(f"Error generating summary: {e}")
            raise Exception(f"Failed to get summary from ChatGPT: {str(e)}")


class EmailSender:
    """Responsible for composing and sending emails."""

    def __init__(self, sender_email, sender_password, smtp_server, smtp_port):
        self.sender_email = sender_email
        self.sender_password = sender_password
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port

    def send_email(self, subject: str, text_content: str, html_content: str, receiver_email: str) -> bool:
        """Sends an email with both text and HTML content using SMTP."""
        if not all([subject, text_content, html_content, receiver_email]):
            raise ValueError("All parameters are required for sending an email.")

        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = self.sender_email
        message["To"] = receiver_email

        # Attach plain text and HTML versions
        part_text = MIMEText(text_content, "plain")
        part_html = MIMEText(html_content, "html")

        message.attach(part_text)
        message.attach(part_html)
        context = ssl.create_default_context()
        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                # Secure the connection
                server.starttls(context=context)
                server.login(self.sender_email, self.sender_password)
                server.sendmail(self.sender_email, receiver_email, message.as_string())
            print(f"Email sent successfully to {receiver_email}!")
            return True
        except Exception as e:
            msg = f"Error sending email: {e}. Please check your SENDER_EMAIL, SENDER_PASSWORD, and SMTP settings. For Gmail, ensure you are using an App Password if 2FA is enabled."
            print(msg)
            raise Exception(msg)


class HTMLFormatter:
    """Responsible for formatting content into HTML."""

    @staticmethod
    def format_summary_to_html(title: str, summary: str, include_timestamp: bool = True) -> str:
        """Formats a text summary into HTML format."""
        timestamp = f"<p><em>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</em></p>" if include_timestamp else ""
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }}
                h1 {{ color: #2c3e50; }}
                .summary {{ background-color: #f9f9f9; padding: 15px; border-left: 4px solid #3498db; margin-bottom: 20px; }}
                .disclaimer {{ font-size: 0.8em; color: #7f8c8d; border-top: 1px solid #eee; padding-top: 10px; margin-top: 30px; }}
            </style>
        </head>
        <body>
            <h1>{title}</h1>
            <div class="summary">
                <p>{summary.replace('\n', '<br>')}</p>                
            </div>
            {timestamp}
            <div class="disclaimer">
                <p>Disclaimer: {EmailConfig.EMAIL_DISCLAIMER}.</p>
            </div>
        </body>
        </html>
        """
        return html_content


class BriefWaveAutomator:
    """Orchestrates the entire process of generating and emailing content summaries."""

    def __init__(self):
        self.chatgpt_client = ChatGPTClient(
            OpenAIConfig.API_KEY,
            OpenAIConfig.MODEL
        )
        self.email_sender = EmailSender(
            EmailConfig.SENDER_EMAIL,
            EmailConfig.SENDER_PASSWORD,
            EmailConfig.SMTP_SERVER,
            EmailConfig.SMTP_PORT
        )

    def run(self):
        """Executes the automation workflow: generates summary and sends email."""

        print(f"Starting OpenAI Automation at {datetime.now()}")
        for prompt in OpenAIConfig.PROMPT:
            title = prompt["title"]
            content = prompt["content"]

            if not (content and title):
                continue

            print(f"Generating summary for: {title}")
            summary_text = self.chatgpt_client.generate_summary(content)
            email_subject = f"{title} {EmailConfig.EMAIL_SUBJECT} - {datetime.now().strftime('%Y-%m-%d')}"
            text_content = f"Dear, \n\nFor the Open AI Content:\n\n{content}\n\nBelow is your report summary:\n\n{summary_text}\n\n\n\n"
            html_content = HTMLFormatter.format_summary_to_html(title, summary_text)
            self.email_sender.send_email(
                email_subject,
                text_content,
                html_content,
                EmailConfig.RECEIVER_EMAIL
            )


def main():
    """Main function to run the BriefWave automation."""
    try:
        print("Starting BriefWave automation...")
        automator = BriefWaveAutomator()
        automator.run()
    except Exception as e:
        print(f"Error running BriefWave: {e}")
        raise


if __name__ == "__main__":
    sys.exit(main())
